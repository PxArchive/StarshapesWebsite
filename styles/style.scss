// imports these scss files IN ORDER before compiling to CSS
// the _ in the filename makes it compile to style.css instead of individual css files

@import "./resets";
@import "./variables";
@import "./fonts";
@import "./nav";



body {
    background: $g-background; // use the gradient variable as background
    &::before {
        content: ''; // create an invisible clone of the same object
        z-index: -1; // place it behind the content inside 'body'
        display: grid;
        position: fixed;
        width: 100%;
        height: 100%;
        background-image: url(../assets/img/image_054_0000_t.png);
        opacity: 0.85;
        background-size: 400px;
        background-repeat: repeat;
        mix-blend-mode: screen;
    }
}

// very important grid setup that the layout relies on
.content-grid {
    --padding-bar: 0.5rem; // sets the page padding base value
    --content-max-width: 960px ; // sets the maximum width of the main content
    --breakout-width: minmax(0px, 3rem); // how far the breakout element breaks out

    display: grid;
    grid-template-columns: 
    [fullwidth-start] // label to call all 5 columns "fullwidth"
    minmax(var(--padding-bar), 1fr) // dynamically scale the page padding between the minimum padding, and infinity, to keep the content centered

    [breakout-start] // label to call the inner 3 columns "breakout"
    var(--breakout-width) 

    [content-start] // label to call the central column "content"
    min(100% - (var(--padding-bar) * 4), var(--content-max-width)) // removes the breakout padding dynamically on small screen sizes, while keeping the main content column to a maximum width
    [content-end] 

    var(--breakout-width) 
    [breakout-end] 

    minmax(var(--padding-bar), 1fr) 
    [fullwidth-end];
    // start and end suffix/prefix creates the grid-areas that content is assigned to
}

.content-grid > * {
    grid-column: content; // assign all direct children of the grid to fill only the "content" central column
}

.content-grid > .breakout {
    grid-column: breakout; // assign the breakout class to the breakout area, becoming slightly wider than the content
}

.content-grid > .fullwidth {
    grid-column: fullwidth; // assign the fullwidth class to all 5 columns, fulling the entire width of the screen
}


button {

    --glow-size: 0.35em;
    cursor: pointer; // makes the mouse into a hand so it looks clickable
    display: grid;
    grid-template-columns: auto auto;

    // font stuff
    color: $col-white; 
    font-family: $font-display;
    font-weight: 900;
    font-size: $fs-button;

    // general size and styling
    padding: 0.4em 0.8em;
    margin: 1rem;
    width: fit-content;
    border: 2px solid $col-white;
    border-radius: $border-radius;
    background: none;

    transition: 200ms;
    
    // create a funny orb before the text
    &::before {
        content: ''; //make the orb exist without any content
        position: relative;
        display: grid;
        align-self: center;
        // top: -0.1em; // fix centering due to button padding. Should scale with font size
        width: 0.55em;
        height: 0.55em;
        background-color: $col-white;
        border-radius: 9em;
        margin-right: 0.5em ;
    }

    // text and outline glow on hover
    &:hover {
        text-shadow: 0px 0px var(--glow-size) $col-white; // make the text glow
        box-shadow: 0px 0px var(--glow-size) $col-cyan, inset 0px 0px var(--glow-size) $col-cyan ; // make the outline glow
        transition: 200ms;
    }

    // make the orb glow
    &:hover::before {
        box-shadow: 0px 0px var(--glow-size) $col-white;
        transition: 200ms;

    }

    // make the text black, and background white when the button is clicked
    &:active {
        background: $col-white;
        color: $col-black;
        transition: 0ms;
    }
    
    // make the orb black when the button is clicked
    &:active::before {
        background-color: $col-black;
        transition: 0ms;
    }
}

hr {
    --width-offset: 0.3rem; // distance that the blur is wider than the original line
    display: grid; // to make stuff work better
    width: calc(100% - var(--width-offset)); //subtract the extra blur width from the line width
    height: 2px;
    border: none;
    border-radius: $border-radius;
    background: #ffffff;
    margin-inline: auto;
    margin-block: $spc-med;
    overflow: visible; // everything outside the line (the glow) disappears without this - weird <hr> behaviour

    &::before, &::after { 

        content: '';
        position: relative; 
        top: -1px; // offset to center on the y axis
        left: calc(var(--width-offset) * -0.5); // offset to center the blur
        width: calc(100% + var(--width-offset)); // add the extra width back in, otherwise it would be the same size
        height: 2px;

        background: $g-rainbow;
        filter: blur(0.3rem);
        mix-blend-mode: screen; 
    }
}

img {
    border-radius: $border-radius;
    box-shadow: 0px 0px $spc-small $col-white;
    max-width: calc(100% - 2rem); // add a 2rem margin while maintaining the centering from margin auto
    margin-inline: auto;
}